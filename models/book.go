// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Book book
// swagger:model Book
type Book struct {

	// author name
	// Required: true
	AuthorName *string `json:"authorName"`

	// book name
	// Required: true
	BookName *string `json:"bookName"`

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// publish date
	// Required: true
	// Format: date
	PublishDate *strfmt.Date `json:"publishDate"`
}

// Validate validates this book
func (m *Book) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Book) validateAuthorName(formats strfmt.Registry) error {

	if err := validate.Required("authorName", "body", m.AuthorName); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateBookName(formats strfmt.Registry) error {

	if err := validate.Required("bookName", "body", m.BookName); err != nil {
		return err
	}

	return nil
}

func (m *Book) validatePublishDate(formats strfmt.Registry) error {

	if err := validate.Required("publishDate", "body", m.PublishDate); err != nil {
		return err
	}

	if err := validate.FormatOf("publishDate", "body", "date", m.PublishDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Book) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Book) UnmarshalBinary(b []byte) error {
	var res Book
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
