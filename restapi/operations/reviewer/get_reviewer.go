// Code generated by go-swagger; DO NOT EDIT.

package reviewer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReviewerHandlerFunc turns a function with the right signature into a get reviewer handler
type GetReviewerHandlerFunc func(GetReviewerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReviewerHandlerFunc) Handle(params GetReviewerParams) middleware.Responder {
	return fn(params)
}

// GetReviewerHandler interface for that can handle valid get reviewer params
type GetReviewerHandler interface {
	Handle(GetReviewerParams) middleware.Responder
}

// NewGetReviewer creates a new http.Handler for the get reviewer operation
func NewGetReviewer(ctx *middleware.Context, handler GetReviewerHandler) *GetReviewer {
	return &GetReviewer{Context: ctx, Handler: handler}
}

/*GetReviewer swagger:route GET /reviewer/{id} reviewer getReviewer

get a reviewer by it's id

*/
type GetReviewer struct {
	Context *middleware.Context
	Handler GetReviewerHandler
}

func (o *GetReviewer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReviewerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
