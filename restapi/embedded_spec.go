// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a simple API",
    "title": "Simple BookStore API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/api/v1",
  "paths": {
    "/book": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "add New Book in Store",
        "operationId": "addNewbook",
        "parameters": [
          {
            "name": "book",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/book/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "get a book by it's id",
        "operationId": "getBook",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "bookId not Found"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "update a book by bookId",
        "operationId": "updateBook",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "book",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "bookId not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "delete book from store by bookId",
        "operationId": "deleteBook",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "bookId not Found"
          }
        }
      }
    },
    "/books": {
      "get": {
        "description": "retun all available books in store\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "get all books from store",
        "operationId": "getAllBooks",
        "responses": {
          "200": {
            "description": "list of Books",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/reviewer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "add New Reviewer in Store",
        "operationId": "addNewReviewer",
        "parameters": [
          {
            "name": "reviewer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reviewer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/reviewer/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "get a reviewer by it's id",
        "operationId": "getReviewer",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved",
            "schema": {
              "$ref": "#/definitions/Reviewer"
            }
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "reviewer id not Found"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "update a reviewer by reviewer id",
        "operationId": "updateReviewer",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "reviewer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reviewer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "reviewerId not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "delete reviewer from store by reviewerId",
        "operationId": "deleteReviewer",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "reviewerId not Found"
          }
        }
      }
    },
    "/reviewers": {
      "get": {
        "description": "return all reviewers\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "get all reviewers",
        "operationId": "getAllReviewers",
        "responses": {
          "200": {
            "description": "list of reviewers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reviewer"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    }
  },
  "definitions": {
    "Book": {
      "type": "object",
      "required": [
        "bookName",
        "authorName",
        "publishDate"
      ],
      "properties": {
        "authorName": {
          "type": "string",
          "example": "Eric Evans"
        },
        "bookName": {
          "type": "string",
          "example": "Domain Driven Design"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "publishDate": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Reviewer": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        }
      }
    }
  },
  "tags": [
    {
      "description": "book Details",
      "name": "book"
    },
    {
      "description": "user details",
      "name": "user"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a simple API",
    "title": "Simple BookStore API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/api/v1",
  "paths": {
    "/book": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "add New Book in Store",
        "operationId": "addNewbook",
        "parameters": [
          {
            "name": "book",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/book/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "get a book by it's id",
        "operationId": "getBook",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "bookId not Found"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "update a book by bookId",
        "operationId": "updateBook",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "book",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "bookId not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "delete book from store by bookId",
        "operationId": "deleteBook",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "bookId not Found"
          }
        }
      }
    },
    "/books": {
      "get": {
        "description": "retun all available books in store\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "get all books from store",
        "operationId": "getAllBooks",
        "responses": {
          "200": {
            "description": "list of Books",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/reviewer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "add New Reviewer in Store",
        "operationId": "addNewReviewer",
        "parameters": [
          {
            "name": "reviewer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reviewer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/reviewer/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "get a reviewer by it's id",
        "operationId": "getReviewer",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved",
            "schema": {
              "$ref": "#/definitions/Reviewer"
            }
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "reviewer id not Found"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "update a reviewer by reviewer id",
        "operationId": "updateReviewer",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "reviewer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reviewer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "reviewerId not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "delete reviewer from store by reviewerId",
        "operationId": "deleteReviewer",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "reviewerId not Found"
          }
        }
      }
    },
    "/reviewers": {
      "get": {
        "description": "return all reviewers\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "reviewer"
        ],
        "summary": "get all reviewers",
        "operationId": "getAllReviewers",
        "responses": {
          "200": {
            "description": "list of reviewers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reviewer"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    }
  },
  "definitions": {
    "Book": {
      "type": "object",
      "required": [
        "bookName",
        "authorName",
        "publishDate"
      ],
      "properties": {
        "authorName": {
          "type": "string",
          "example": "Eric Evans"
        },
        "bookName": {
          "type": "string",
          "example": "Domain Driven Design"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "publishDate": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Reviewer": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        }
      }
    }
  },
  "tags": [
    {
      "description": "book Details",
      "name": "book"
    },
    {
      "description": "user details",
      "name": "user"
    }
  ]
}`))
}
